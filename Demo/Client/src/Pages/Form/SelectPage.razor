@page "/documentation/form/select"

<DocumentationRoot>
    <ExampleBox>
        <ExampleOptions>
            <EditForm Model="@this">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <OptionsBox>
                    <OptionsBoxItem>
                        <div class="control">
                            <label class="label">Color</label>
                            <BulInputSelectEnum @bind-Value="Color" />
                        </div>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <div class="control">
                            <label class="label">Size</label>
                            <BulInputSelectEnum @bind-Value="Size" />
                        </div>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <BulInputCheckbox @bind-Value="Rounded">
                            Rounded
                        </BulInputCheckbox>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <BulInputCheckbox @bind-Value="Loading">
                            Loading
                        </BulInputCheckbox>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <BulInputCheckbox @bind-Value="HasIcon">
                            Has Icon
                        </BulInputCheckbox>
                    </OptionsBoxItem>
                </OptionsBox>
            </EditForm>
        </ExampleOptions>

        <ExampleResult>
            <EditForm Model="@this">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <section>
                    <div class="input-block">
                        <div class="input-type">Generic Select</div>
                        <div>Value: @(DemoDataOptions[DemoDataValue])</div>
                        <BulInputSelect @bind-Value="DemoDataValue" 
                            Size="Size" 
                            Color="Color" 
                            Rounded="Rounded"
                            Loading="Loading"
                            IconClass="@IconString" >

                            @foreach(var item in DemoDataOptions)
                            {
                                <option value="@item.Key">@item.Value</option>
                            }
                        </BulInputSelect>
                    </div>

                    <div class="input-block">
                        <div class="input-type">Dictionary Select</div>
                        <div>Value: @(DemoDataOptions[DicSelectValue.Key])</div>
                        <BulInputSelectDictionary @bind-Value="@DicSelectValue" 
                            Options="@DemoDataOptions"
                            Size="Size" 
                            Color="Color" 
                            Rounded="Rounded"
                            Loading="Loading"
                            IconClass="@IconString" />
                    </div>

                    <div class="input-block">
                        <div class="input-type">Enum Select</div>
                        <div>Value: @(EnumSelectValue)</div>
                        <BulInputSelectEnum @bind-Value="@EnumSelectValue" 
                            DisplayNames="EnumDisplayNames"
                            Size="Size" 
                            Color="Color" 
                            Rounded="Rounded"
                            Loading="Loading"
                            IconClass="@IconString" />
                    </div>
                </section>

            </EditForm>
        </ExampleResult>
    </ExampleBox>
</DocumentationRoot>

@code {
    public KeyValuePair<string, string> DicSelectValue { get; set; } = new KeyValuePair<string, string>("chewbacca", "Chewbacca");

    public BulSize EnumSelectValue { get; set; } = BulSize.Medium;
    public Dictionary<BulSize, string> EnumDisplayNames { get; set; } = new Dictionary<BulSize, string>()
    {
        { BulSize.Normal, "Normal Pretty" }
    };

    public BulSchemeColor Color { get; set; } = BulSchemeColor.Default;
    public BulSize Size { get; set; } = BulSize.Default;
    public bool Rounded { get; set; }
    public bool Loading { get; set; }
    public bool HasIcon { get; set; }
    public string IconString { get { return (HasIcon ? "fa fa-save fa-2x" : null); } }
    public string DemoDataValue { get; set; } = "luke";
    public Dictionary<string, string> DemoDataOptions { get; set; } = new Dictionary<string, string>()
    {
        { "luke", "Luke" },
        { "han", "Han" },
        { "chewbacca", "Chewbacca" },
        { "darth-vadar", "Darth Vader" },
    };
}