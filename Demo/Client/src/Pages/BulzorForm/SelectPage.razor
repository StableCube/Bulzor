@page "/documentation/form/select"

<DocumentationRoot>
    <ExampleBox>
        <ExampleOptions>
            <EditForm Model="@this">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <OptionsBox>
                    <OptionsBoxItem>
                        <div class="control">
                            <label class="label">Color</label>
                            <BulInputSelectEnum @bind-Value="Color" />
                        </div>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <div class="control">
                            <label class="label">Size</label>
                            <BulInputSelectEnum @bind-Value="Size" />
                        </div>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <BulInputCheckbox @bind-Value="Rounded">
                            Rounded
                        </BulInputCheckbox>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <BulInputCheckbox @bind-Value="Loading">
                            Loading
                        </BulInputCheckbox>
                    </OptionsBoxItem>

                    <OptionsBoxItem>
                        <BulInputCheckbox @bind-Value="HasIcon">
                            Has Icon
                        </BulInputCheckbox>
                    </OptionsBoxItem>
                </OptionsBox>
            </EditForm>
        </ExampleOptions>

        <ExampleResult>
            <EditForm EditContext="@EditContext">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <section>
                    <div class="input-block">
                        <div class="input-type">Generic Select</div>
                        <div>Value: @FormData.GenericSelectValue</div>
                        <BulInputSelect @bind-Value="FormData.GenericSelectValue" 
                            Size="Size" 
                            Color="Color" 
                            Rounded="Rounded"
                            Loading="Loading"
                            IconClass="@IconString" >

                            @foreach(var item in DemoDataOptions)
                            {
                                <option value="@item.Value">@item.Key</option>
                            }
                        </BulInputSelect>
                    </div>

                    <div class="input-block">
                        <div class="input-type">Dictionary Select</div>
                        <div>Value: @FormData.DicSelectValue2.Value</div>
                        <BulInputSelectDictionary @bind-Value="@FormData.DicSelectValue2" 
                            Options="@DecadeOptions"
                            Size="Size" 
                            Color="Color" 
                            Rounded="Rounded"
                            Loading="Loading"
                            IconClass="@IconString" />
                    </div>

                    <div class="input-block">
                        <div class="input-type">Enum Select</div>
                        <div>Value: @(FormData.EnumSelectValue)</div>
                        <BulInputSelectEnum @bind-Value="@FormData.EnumSelectValue" 
                            DisplayNames="EnumDisplayNames"
                            Size="Size" 
                            Color="Color" 
                            Rounded="Rounded"
                            Loading="Loading"
                            IconClass="@IconString" />
                    </div>
                </section>

            </EditForm>
        </ExampleResult>
    </ExampleBox>
</DocumentationRoot>

@code {
    private EditContext EditContext { get; set; }
    private InputSelectPageFormData FormData { get; set; }

    // You can pass enum selection DisplayNames with the value being display name override. Otherwise it is just the value of ToString
    public ImmutableDictionary<BulSize, string> EnumDisplayNames { get; set; } = ImmutableDictionary.CreateRange<BulSize, string>(
        new KeyValuePair<BulSize, string>[] {
            KeyValuePair.Create(BulSize.Normal, "Normal Pretty")
        }
    );

    public BulSchemeColor Color { get; set; } = BulSchemeColor.Default;
    public BulSize Size { get; set; } = BulSize.Default;
    public bool Rounded { get; set; }
    public bool Loading { get; set; }
    public bool HasIcon { get; set; }
    public string IconString { get { return (HasIcon ? "fa fa-save fa-2x" : null); } }

    public ImmutableDictionary<string, string> DemoDataOptions { get; set; } = ImmutableDictionary.CreateRange<string, string>(
        new KeyValuePair<string, string>[] {
            KeyValuePair.Create("Luke", "luke"),
            KeyValuePair.Create("Han", "han"),
            KeyValuePair.Create("Chewbacca", "chewbacca"),
            KeyValuePair.Create("Darth Vader", "darth-vadar")
        }
    );

    public ImmutableDictionary<int, string> DecadeOptions { get; set; }

    protected override void OnInitialized()
    {
        var decadeOptions = ImmutableDictionary.CreateBuilder<int, string>();
        for (int i = 1940; i < DateTime.UtcNow.Year; i += 10)
            decadeOptions.Add(i, i.ToString() + "'s");

        DecadeOptions = decadeOptions.ToImmutable();

        FormData = new InputSelectPageFormData();
        EditContext = new EditContext(FormData);
    }
}