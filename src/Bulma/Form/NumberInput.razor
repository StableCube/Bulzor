@namespace StableCube.Bulzor

<div class="field">
    <p class="@_class">
        <input class="input" 
            type="number" 
            placeholder="@Placeholder" 
            value="@Value.ToString()" 
            @oninput="@(async (ChangeEventArgs args) => await InputHandlerAsync(args))"
            disabled="@Disabled"
            readonly="@Readonly" 
            min="@_minStr"
            max="@_maxStr"
            step="@_stepStr"
            />
        
        @if(LeftIcon != null)
        {
            <Icon Name="@LeftIcon" Class="is-left"></Icon>
        }

        @if(RightIcon != null)
        {
            <Icon Name="@RightIcon" Class="is-right"></Icon>
        }
    </p>
</div>

@code {
    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public double? Min { get; set; }

    [Parameter]
    public double? Max { get; set; }

    [Parameter]
    public double? Step { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public BulPrimaryColor? Color { get; set; }

    [Parameter]
    public BulColor? TextColor { get; set; }

    [Parameter]
    public BulSize? Size { get; set; }

    [Parameter]
    public bool? Rounded { get; set; }

    [Parameter]
    public bool? Loading { get; set; }

    [Parameter]
    public string LeftIcon { get; set; }

    [Parameter]
    public string RightIcon { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    private BulmaClassBuilder _classBuilder = new BulmaClassBuilder("control");
    private string _class = String.Empty;
    private string _minStr = null;
    private string _maxStr = null;
    private string _stepStr = null;

    protected override void OnParametersSet()
    {
        if(Min.HasValue)
            _minStr = Min.Value.ToString();

        if(Max.HasValue)
            _maxStr = Max.Value.ToString();

        if(Step.HasValue)
            _stepStr = Step.Value.ToString();

        _classBuilder.SetPrimaryColor(Color);
        _classBuilder.SetTextColor(TextColor);
        _classBuilder.SetSize(Size);
        _classBuilder.SetIsRounded(Rounded);
        _classBuilder.SetIsLoading(Loading);

        if(LeftIcon != null)
            _classBuilder.SetHasIconsLeft(true);

        if(RightIcon != null)
            _classBuilder.SetHasIconsRight(true);

        _class = _classBuilder.ToString();

        StateHasChanged();
    }

    public async Task InputHandlerAsync(ChangeEventArgs args)
    {
        Value = Convert.ToDouble(args.Value.ToString());
        await ValueChanged.InvokeAsync(Value);
    }
}