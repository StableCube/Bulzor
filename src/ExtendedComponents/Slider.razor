@namespace StableCube.Bulzor

<div class="@_contClass">
    <input class="@_inputClass" type="range"
        min="@Min"
        max="@Max"
        value="@Value"
        disabled="@Disabled"
        @oninput="@(async (ChangeEventArgs e) => await OnInputHandlerAsync(e))"
        @onmouseup="@(async (MouseEventArgs e) => await OnMouseUpHandlerAsync(e))" />
</div>

@code {
    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    [Parameter]
    public double Min { get; set; }

    [Parameter]
    public double Max { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter] 
    public EventCallback<double> OnMouseUp { get; set; }

    [Parameter] 
    public EventCallback<double> OnInput { get; set; }

    [Parameter]
    public BulSize? Size { get; set; }

    [Parameter]
    public BulPrimaryColor? Color { get; set; }

    [Parameter]
    public BulColor? BackgroundColor { get; set; }

    [Parameter]
    public BulColor? BorderColor { get; set; }

    private BulmaClassBuilder _sliderContClassBuilder = new BulmaClassBuilder("slider-container");
    private string _contClass = String.Empty;
    private BulmaClassBuilder _sliderInputClassBuilder = new BulmaClassBuilder("slider-input");
    private string _inputClass = String.Empty;

    protected override void OnParametersSet()
    {
        _sliderContClassBuilder.SetBackgroundColor(BorderColor);
        _contClass = _sliderContClassBuilder.ToString();

        _sliderInputClassBuilder.SetPrimaryColor(Color);
        _sliderInputClassBuilder.SetSize(Size);
        _sliderInputClassBuilder.SetBackgroundColor(BackgroundColor);
        _inputClass = _sliderInputClassBuilder.ToString();

        StateHasChanged();
    }

    private async Task OnInputHandlerAsync(ChangeEventArgs args)
    {
        var inputVal = double.Parse((string) args.Value);
        if(inputVal == Value)
            return;
        
        Value = inputVal;
        await OnInput.InvokeAsync(inputVal);
        await ValueChanged.InvokeAsync(inputVal);
    }

    private async Task OnMouseUpHandlerAsync(MouseEventArgs e)
    {
        await OnMouseUp.InvokeAsync(Value);
    }

    private string GetTimeString(TimeSpan time)
    {
        if(time.TotalMinutes < 1)
            return time.ToString(@"ss\.ff");

        if(time.TotalHours < 1)
            return time.ToString(@"mm\:ss\.ff");

        return time.ToString(@"hh\:mm\:ss\.ff");
    }
}