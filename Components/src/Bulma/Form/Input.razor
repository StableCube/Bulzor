@namespace StableCube.Bulzor.Components

<div class="@_class">
    <input class="input" 
        type="@Type" 
        placeholder="@Placeholder" 
        value="@Value" 
        @oninput="@(async (ChangeEventArgs args) => await InputHandlerAsync(args))"
        disabled="@Disabled"
        readonly="@Readonly" />
    
    @if(LeftIcon != null)
    {
        <Icon Name="@LeftIcon" Class="is-left"></Icon>
    }

    @if(RightIcon != null)
    {
        <Icon Name="@RightIcon" Class="is-right"></Icon>
    }
</div>

@code {
    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public BulPrimaryColor? Color { get; set; }

    [Parameter]
    public BulColor? TextColor { get; set; }

    [Parameter]
    public BulSize? Size { get; set; }

    [Parameter]
    public bool? Rounded { get; set; }

    [Parameter]
    public string Type { get; set; } = "text";

    [Parameter]
    public bool? Loading { get; set; }

    [Parameter]
    public string LeftIcon { get; set; }

    [Parameter]
    public string RightIcon { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Readonly { get; set; }

    [Parameter]
    public bool? Static { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private BulmaClassBuilder _classBuilder = new BulmaClassBuilder("control");
    private string _class = String.Empty;

    protected override void OnParametersSet()
    {
        _classBuilder.SetPrimaryColor(Color);
        _classBuilder.SetTextColor(TextColor);
        _classBuilder.SetSize(Size);
        _classBuilder.SetIsRounded(Rounded);
        _classBuilder.SetIsLoading(Loading);
        _classBuilder.SetIsStatic(Static);

        if(LeftIcon != null)
            _classBuilder.SetHasIconsLeft(true);

        if(RightIcon != null)
            _classBuilder.SetHasIconsRight(true);

        _class = _classBuilder.ToString();

        StateHasChanged();
    }

    public async Task InputHandlerAsync(ChangeEventArgs args)
    {
        Value = args.Value.ToString();
        await ValueChanged.InvokeAsync(Value);
    }
}